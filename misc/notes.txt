
list of lists

or boolean expressions

MAT 151 or MAT 152, as well as MAT 161 or MAT 162

[["MAT 151", "MAT 152"], ["MAT 161", "MAT 162"]]

If using clingo

course(512).
course(306).

prereq(512, [[mat110, mat112],[cse110,cse112]]).

desc(512, "This is a course").

:- #count{ enroll(X,Semester)} 6 :- Semester in 1...N.
:- #min{}

# TSP Example -- minimization


# Tests
Reachability
Cycle detection
Topological sort
Shortest path
Minimum spanning tree
Unit tests

Call it programmatically

e.g. clingo proj.lp data.lp department_rules.lp --outf=2 --quiet=1


Current notes:

Honors - use course description to separate out into different file cse_honors.lp
Repeatable classes - Use course description to create separate file of atoms of repeatable classes, including how many times repeated, and/or for upto how many credits.

Co-requisites are not modeled

% Course needs 114 and either (100 and 110) or (214 and 210)
req(215, [114, 110, 100])
req(215, [114, 214, 210])

OR

req(215, [114|Rs]) :- Rs = [110, 100]; Rs = [214, 210].

req(215, [114|Rs]) :-
    Rs = [110,100] ;
    Rs = [214, 210].

---------------------
taken(C,S) :- 
    in_semester(C,S1),
    S1 < S.

% This part is DNF -- IMPORTANT!!
can_take(215, S) :-
    taken(114, S) ,
    ( (taken(110, S), taken(100, S)) ) ;
    (taken(214, S), taken(210, S))

:- in_semester(C,S), not can_take(C,S).
--------------------

% from python
reqs(303, and(course(215), or(course(214), course(210)))).

% NOTE:
% Clean representation
% Faster and safer

% core rules
taken(and(R1,R2), S) :- taken(R1,S), taken(R2,S).
taken(or(R1,R2), S) :- taken(R1,S); taken(R2,S).
taken(course(C), S) :- in_semester(C,S1), S1 < S.

can_take(C, S) :-
    reqs(C, Reqs),
    taken(Reqs, S).

:- in_semester(C,S), not can_take(C,S).

----------------------------

:- course_name(Name), unfulfilled_prereqs

% Conjuctive normal form for course preqs??

NOTE: Need to handle corequisites

NOTE: parsing, split along 'or'

% Potasscto guide
disjunctive logic/heads, pg 29.

conjunction/disjunction pg. 98.
